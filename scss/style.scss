@import 'reset.scss';
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&display=swap');

header {
	width: 100%;
	height: 40vh;
	background: #191f26;
	position: relative;
	padding: 5vh 10vw;
	display: flex;
	justify-content: space-between;
	align-items: flex-start;
	h1 {
		color: #fff;
	}
	#gnb {
		display: flex;
		gap: 60px;
		padding-top: 10px;
		color: #fff;
		li {
			cursor: pointer;
		}
	}
	.fa-bars {
		color: #fff;
		position: absolute;
		right: 5vw;
		top: 5vh;
		font-size: 24px;
		display: none;
	}
}

figure {
	width: 100%;
	height: 60vh;
	background: #191f26;
	position: relative;
	border-top: 1px solid rgba(255, 255, 255, 0.3);
	.tits {
		height: 12vw;
		position: absolute;
		top: -5vw;
		left: 10vw;
		h2 {
			position: absolute;
			top: 0;
			left: 0;
			font-weight: bold;
			font-size: 5vw;
			line-height: 1;
			color: rgba(255, 255, 255, 0.2);
			transform: translateX(-100px);
			opacity: 0;
			transition: 1s;

			&.on {
				opacity: 1;
				transform: translateX(0px);
			}
		}
	}

	.bgs {
		width: 100%;
		height: 100%;
		overflow: hidden;
		position: relative;
		background: #191f26;
		opacity: 1;

		video {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			object-fit: cover;
			opacity: 0;
			transition: opacity 2s;

			&.on {
				opacity: 0.4;
			}
		}
	}

	.paging {
		color: #bbb;
		font-size: 30px;
		letter-spacing: 1px;
		position: absolute;
		top: -50px;
		right: 10vw;
		strong {
			color: #fff;
			font-weight: normal;
			opacity: 0.7;
		}
		span {
			color: #ddd;
			display: inline-block;
			opacity: 0.6;
			transform: scale(0.5) translateX(-20px) translateY(10px);
		}
	}
	.banner {
		width: 70%;
		height: 100%;
		overflow: hidden;
		position: absolute;
		top: 0;
		right: 0;

		ul {
			//전체 폭 기준으로 3등분한 패널이 5개 좌우로 묶여야 됨
			// 100% /3 한 값에서 다시 곱하기 5개
			width: calc(100% / 3 * 5);
			height: 100%;
			position: absolute;
			top: 0;
			left: 0;

			li {
				float: left;
				width: calc(100% / 5);
				height: 100%;
				border-left: 1px solid rgba(255, 255, 255, 0.2);
				color: #fff;
				position: relative;
				// transition: border 0.5s; 보더값 살짝 안보이게 처리
				//비포요소로 호버막 설정
				&::before {
					content: '';
					width: 100%;
					height: 100%;
					background: rgba(21, 32, 44, 0.5);
					position: absolute;
					left: 0;
					bottom: -100%;
					transition: 0.5s; //아래에서 위로 올라오는 호버모션처리
				}

				.txt {
					width: 80%;
					position: absolute;
					left: 10%; //넓이가 80%니깐 10%줘야 가운데 중앙으로 옴
					top: 60%; //살짝 아래쪽에 배치가 되게할거여서
					transition: 0.5s; //txt도 모션이 일어나야해서 (마우스 올리면 위쪽으로 올라가게)

					strong {
						display: block; //strong이니깐 블록화
						width: 100%;
						font: 20px;
						color: yellow;
						margin-bottom: 20px;
						opacity: 0.4;
						transition: 0.5s;
					}

					h2 {
						width: 100%;
						font: 24px;
						letter-spacing: 1px;
						opacity: 0.5;
						padding-top: 20px; //바가 생길 공간을 만들어야해서 패딩탑으로 잡음
						position: relative;
						transition: 0.5s;

						//h2비포용으로 바의 회색트랙 만듦
						&::before {
							content: '';
							display: block;
							width: 100%;
							height: 2px;
							background: rgba(255, 255, 255, 0.5);
							position: absolute;
							top: 0;
							left: 0;
						}

						span {
							display: block;
							width: 0%; //패널이 생기면 안보였다가 길어져야하니깐 초기값 0
							height: 2px;
							background: orange;
							opacity: 0.7;
							position: absolute;
							top: 0;
							left: 0;
						}
					}
					//비포 호버막이랑 같이 올라오면서 뷰 디테일이랑 p본문이 나오게할거임
					p {
						// font: 12px/1.3;
						opacity: 0; //안보이다가 보이게할거니깐 투명도 0 & 하이트 0
						height: 0;
						margin-top: 30px;
						overflow: hidden;
						transition: 0.5s;
					}

					a {
						display: flex;
						justify-content: center;
						align-items: center;
						width: 120px;
						height: 30px;
						border: 1px solid rgba(255, 255, 255, 0.5);
						// font: 10px/1;
						color: #fff;
						margin-top: 30px;
						transform: translateY(
							100px
						); //아래에서 위로 올라오면서 살짝 아래로 버튼위로 올라오는 호버모션
						transition: opacity 0.5s 0.2s, transform 0.5s 0.2s;
						//0.5s 지속시간 0.2s 딜레이
					}
				}
				//li hoVer style
				&:hover {
					border-left: 1px solid transparent;
					&::before {
						bottom: 0%;
					}
					.txt {
						top: 20%;
						p {
							height: auto;
							opacity: 0.4;
						}
						a {
							transform: translateY(0px);
							opacity: 1;
							transition: 0.5s;
							//a에다가 다시 호버를 하면
							&:hover {
								background: #fff;
								color: #555;
							}
						}
					}
				}

				//목록상에서는 2번째지만 실제 화면상에서는 첫번째인 활성화스타일
				&:nth-of-type(2) {
					p {
						opacity: 0.5;
					}
					h2 {
						opacity: 1;
						span {
							width: 100%;
							animation: ani 2s linear 1;
						}
					}
				}
			}
		}
	}

	.controls {
		width: 30%;
		padding: 50px;
		display: flex;
		justify-content: space-between;
		position: absolute;
		bottom: 0;
		left: 0;
		.auto {
			display: flex;
			gap: 20px;
			color: #fff;
			li {
				cursor: pointer;
				transition: 0.5s;
				opacity: 0.5;

				&.on {
					opacity: 1;
					transform: scale(1.3);
				}
			}
		}
		.btns {
			display: flex;
			gap: 20px;
			color: #fff;

			li {
				cursor: pointer;

				i {
					display: inline-block;
					transform: scale(1);
					opacity: 0.5;
				}
				//:active 는 사용자가 활성화한 요소(버튼 등)를 나타낸다. 즉 마우스 버튼을 누르는 순간부터 떼는 시점까지를 의미한다.
				&:active {
					i {
						animation: scale 0.2s linear 1; // 0.2초동안 1번만 동작되게
					}
				}
			}
		}
	}
}

.mask {
	width: 100%;
	height: 100vh;
	background: #191f26;
	// overflow: hidden;
	position: fixed;
	top: 0;
	left: 0;
	display: flex;
	justify-content: center;
	align-items: center;
	img {
		width: 600px;
		max-width: 100%;
	}
}
//스크립트로 모양이 변경돼서 두번째 패널로 나타나게되면은 선이 그어지는 모션작업을 animation으로 처리  ani key 프레임으로 이용

@keyframes ani {
	0% {
		width: 0%;
	}
	100% {
		width: 100%;
	}
}

@keyframes scale {
	0% {
		transform: scale(1);
		opacity: 1;
	}
	100% {
		transform: scale(5);
		opacity: 0;
	}
}

//20240109_만들면서 느낀점 : append prepend 순서를 바꾸다보니 css스타일링도  복잡함
